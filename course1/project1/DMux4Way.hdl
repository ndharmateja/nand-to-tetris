/**
 * 4-way demultiplexor:
 * [a, b, c, d] = [in, 0, 0, 0] if sel = 00
 *                [0, in, 0, 0] if sel = 01
 *                [0, 0, in, 0] if sel = 10
 *                [0, 0, 0, in] if sel = 11'
 */

// in sel1 sel0 a b c d
// 0   0    0   0 0 0 0 
// 0   0    1   0 0 0 0 
// 0   1    0   0 0 0 0 
// 0   1    1   0 0 0 0 
// 1   0    0   1 0 0 0 
// 1   0    1   0 1 0 0 
// 1   1    0   0 0 1 0 
// 1   1    1   0 0 0 1 
// a = (~sel[1] ^ ~sel[0] ^ in);
// b = (~sel[1] ^ sel[0] ^ in);
// c = (sel[1] ^ ~sel[0] ^ in);
// d = (sel[1] ^ sel[0] ^ in);
// CHIP DMux4Way {
//     IN in, sel[2];
//     OUT a, b, c, d;

//     PARTS:
//     Not(in=sel[0], out=notsel0);
//     Not(in=sel[1], out=notsel1);
    
//     And3Way(a=notsel1, b=notsel0, c=in, out=a);
//     And3Way(a=notsel1, b=sel[0], c=in, out=b);
//     And3Way(a=sel[1], b=notsel0, c=in, out=c);
//     And3Way(a=sel[1], b=sel[0], c=in, out=d);
// }


CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    Not(in=sel[1], out=notsel1);

    DMux(in=in, sel=sel[0], a=t1, b=t2);
    And2(
        a[0]=t1, a[1]=t2,
        b[0]=notsel1, b[1]=notsel1,
        out[0]=a, out[1]=b);
    And2(
        a[0]=t1, a[1]=t2,
        b[0]=sel[1], b[1]=sel[1],
        out[0]=c, out[1]=d);
}